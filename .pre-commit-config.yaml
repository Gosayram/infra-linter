# Pre-commit configuration for infra-linter project
# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

default_install_hook_types:
  - pre-commit
  - commit-msg

default_language_version:
  golang: "1.21"

repos:
  # Basic file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-toml
      - id: check-json
      - id: check-added-large-files
        args: [--maxkb=1024]
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: mixed-line-ending
        args: [--fix=lf]

  # Go-specific hooks
  - repo: https://github.com/TekWizely/pre-commit-golang
    rev: v1.0.0-rc.1
    hooks:
      # Go formatting
      - id: go-fmt-repo
        name: Go Format (gofmt)
        description: Format Go source code

      # Go mod tidy
      - id: go-mod-tidy-repo
        name: Go Mod Tidy
        description: Ensure go.mod matches source code

      # Go vet
      - id: go-vet-repo-mod
        name: Go Vet
        description: Examine Go source code for suspicious constructs

      # Go build check
      - id: go-build-repo-mod
        name: Go Build
        description: Build Go packages to check for compilation errors

      # GolangCI-Lint (using existing config)
      - id: golangci-lint-repo-mod
        name: GolangCI-Lint
        description: Run golangci-lint with existing configuration
        args: [--config=.golangci.yml]

  # Local Go tools (using system commands)
  - repo: local
    hooks:
      # Go imports using system goimports
      - id: go-imports-local
        name: Go Imports (goimports)
        description: Update Go import lines
        entry: bash -c 'export PATH=$PATH:$(go env GOPATH)/bin && goimports -w .'
        language: system
        types: [go]
        pass_filenames: false

      # Go tests with coverage
      - id: go-test-local
        name: Go Test with Coverage
        description: Run Go tests with race detection and coverage
        entry: bash -c 'go test -v -race -coverprofile=coverage.out ./...'
        language: system
        types: [go]
        pass_filenames: false

      # Test infra-linter on sample files
      - id: infra-linter-self-test
        name: Infra-Linter Self Test
        description: Run infra-linter on project files to validate functionality
        entry: bash -c 'if [ -f ./infra-linter ]; then ./infra-linter .; fi'
        language: system
        files: \.(dockerfile|Dockerfile|env|makefile|Makefile|service|timer|socket)$
        pass_filenames: false

  # Security checks
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        name: Detect Secrets
        description: Detect secrets in code
        args: [--baseline, .secrets.baseline]
        exclude: ^(go\.sum|\.secrets\.baseline|coverage\.out)$

  # Custom commit message validation
  - repo: local
    hooks:
      - id: custom-commit-msg
        name: Custom Commit Format
        description: Ensure commit messages follow project format [TYPE] - description
        entry: scripts/check-commit-msg.sh
        language: script
        stages: [commit-msg]
        pass_filenames: true 